# Ci√™ncia de Dados - EBAC
# Projeto Final
# Aluno: Lucas Antonio de Sousa Ribeiro

# Imports
import streamlit as st
import pandas as pd
import numpy as np
import pickle
from io import BytesIO
from sklearn.decomposition import PCA
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer 
from sklearn.linear_model import LogisticRegression
from pycaret.classification import load_model, predict_model


# Fun√ß√£o para ler os dados
@st.cache_data
def load_data(file_data):
    return pd.read_csv(file_data, sep=',')
    
# Fun√ß√£o para converter o df para csv
@st.cache_data
def convert_df(df):
    return df.to_csv(index=False).encode('utf-8')

# Fun√ß√£o principal da aplica√ß√£o
def main():
    # Configura√ß√£o inicial da p√°gina da aplica√ß√£o
    st.set_page_config(page_title = 'Credit Scoring', \
        page_icon = 'telmarketing_icon.png',
        layout="wide",
        initial_sidebar_state='expanded'
    )

    # T√≠tulo principal da aplica√ß√£o
    st.write('# Projeto Final - Credit Scoring')
    st.markdown("---")
    
    # Apresenta a imagem na barra lateral da aplica√ß√£o
    #image = Image.open("Bank-Branding.jpg")
    #st.sidebar.image(image)

    # Bot√£o para carregar arquivo na aplica√ß√£o
    st.sidebar.write("## Suba o arquivo")
    data_file_1 = st.sidebar.file_uploader("Credit Scoring data", type='csv')

    # Verifica se h√° conte√∫do carregado na aplica√ß√£o
    if (data_file_1 is not None):
        df = load_data(data_file_1)

        st.write('## Visualiza√ß√£o da Base de Dados')
        st.write(df.head())

        # Separa as colunas num√©ricas das qualitativas do dataframe
        quantitativas = ['qtd_filhos', 'idade', 'tempo_emprego', 'qt_pessoas_residencia',
        'renda']
        qualitativas = ['sexo', 'posse_de_veiculo', 'posse_de_imovel', 'tipo_renda', 'educacao',
       'estado_civil', 'tipo_residencia']

        # Pipeline de preprocessamento dos dados
        # Pipeline que corrige as num√©ricas
        numericas = Pipeline(steps=[
            ('nulos', SimpleImputer(strategy='mean')),
            ('outliers', RobustScaler())
        ])

        # Pipeline que converte as categoricas em dummies
        categoricas = Pipeline(steps=[
            ('nulos', SimpleImputer(strategy='most_frequent')),
            ('dummies', OneHotEncoder(handle_unknown='ignore', drop='first'))
        ])

        # Corrige todas as vari√°veis 
        conversor = ColumnTransformer([
            ('num', numericas, quantitativas),
            ('cat', categoricas, qualitativas)
        ])

        # Faz todo o preprocessamento 
        preprocessamento = Pipeline(steps=[
            ('conversor', conversor),
            ('pca', PCA(n_components=5))
        ])

        # Separa a vari√°vel resposta das explicativas
        X = df.drop(columns='mau')
        y = df.mau.astype(int)

        # Ajusta as vari√°veis explicativas ao Pipeline
        prep_ajuste = preprocessamento.fit_transform(X)
        X_prep = pd.DataFrame(data=prep_ajuste, columns=['PC' + str(i) for i in range(1,6)])
        
        # Carrega o modelo e faz o predict
        model_saved = load_model('model_final')
        predict = model_saved.predict(X_prep)
        score = model_saved.score(X_prep, y)
        
        # Insere o predict no df e mostra os resultados
        df_pred = df.copy()
        df_pred['Predict'] = predict
        st.write('## Resultados do ajuste do modelo')
        st.write(df_pred.head())
        st.write(f'A acur√°cia do ajuste foi de {100*score:.1f}%.')

        # Converte o df para csv e faz o download
        df_csv = convert_df(df_pred)
        st.download_button(label='üì• Download',
                            data=df_csv,
                            file_name= 'predict.csv')

if __name__ == '__main__':
	main()